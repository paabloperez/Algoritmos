AUTORES:
-Heitor Cambre García (heitor.cambre@udc.es)
-Miguel Balea Aguiar (miguel.balea@udc.es)
-Pablo Pérez Noceda (pablo.perez5@udc.es)

INTRODUCCIÓN
Realizaremos una prueba de eficiencia de dos algoritmos de ordenación de un vector de números. Para ello analizaremos 
los tiempos de ejecución además de llevar a cabo una evaluación empírica con distintos tamaños y tipos de conjuntos de datos,
proporcionando una base sólida para tomar decisiones. 

INFORMACIÓN SOBRE LA MÁQUINA:
-SO: Ubuntu 20.04.5 LTS
-Kernel: 5.15.0-75-generic
-Procesador: Intel® Core™ i5-8250U CPU @ 1.60GHz × 8
-Memoria: 8 GiB


PRUEBA DE FUNCIONAMIENTO DE LOS ALGORITMOS:

INICIALIZACION ALEATORIA

Ordenacion por insercion
  3-14 -8  1  3  0 -5  7  5-16-14 -8 16-11 17 10 12
Ordenado? 0
-16-14-14-11 -8 -8 -5  0  1  3  3  5  7 10 12 16 17
Ordenado? 1

Ordenacion shell
  3-14 -8  1  3  0 -5  7  5-16-14 -8 16-11 17 10 12
Ordenado? 0
-16-14-14-11 -8 -8 -5  0  1  3  3  5  7 10 12 16 17
Ordenado? 1

INICIALIZACION DESCENDENTE

Ordenacion por insercion
 10  9  8  7  6  5  4  3  2  1
Ordenado? 0
  1  2  3  4  5  6  7  8  9 10
Ordenado? 1

Ordenacion shell
 10  9  8  7  6  5  4  3  2  1
Ordenado? 0
  1  2  3  4  5  6  7  8  9 10
Ordenado? 1

INICIALIZACION ASCENDENTE

Ordenacion por insercion
  1  2  3  4  5  6  7  8  9 10
Ordenado? 1
  1  2  3  4  5  6  7  8  9 10
Ordenado? 1

Ordenacion shell
  1  2  3  4  5  6  7  8  9 10
Ordenado? 1
  1  2  3  4  5  6  7  8  9 10
Ordenado? 1

RESULTADO:

(Ejecutado varias veces para mayor fiabilidad en la tabla de tiempos)
(Tiempos medidos en microsegundos)
(*)(Tiempo menor a 500 microsegundos, se realizó una prueba de 1.000 vectores y se calculó la media del tiempo de ejecución)
Ordenacion por insercion con inicializacion aleatoria:
____TAMAÑO____________________TIEMPO_____COTA SUBESTIMADA_______COTA AJUSTADA______COTA SOBRESTIMADA
	 n			t(n)	      t(n)/n^1.8	    t(n)/n^2	      t(n)/n^2.2
(*)    500	           167.42400         0.002320982         0.000669696         0.000193234
      1000	           657.00000         0.002615564         0.000657000         0.000129280
      2000	          2607.00000         0.002980486         0.000651750         0.000104774
      4000	         10466.00000         0.003436155         0.000654125         0.000085401
      8000	         42047.00000         0.003964360         0.000656984         0.000067452
     16000	        166715.00000         0.004513970         0.000651230         0.000047356
     32000	        659231.00000         0.005125871         0.000643780         0.000028151


Ordenacion por shell con inicializacion aleatoria:
____TAMAÑO____________________TIEMPO_____COTA SUBESTIMADA_______COTA AJUSTADA______COTA SOBRESTIMADA
	 n			t(n)	      t(n)/n^1.0	  t(n)/n^1.2	      t(n)/n^1.4
(*)    500	            55.92500         0.111850000         0.032273197         0.009312108
(*)   1000	           129.56400         0.129564000         0.032545005         0.008174936
(*)   2000	           295.96900         0.147984500         0.032360128         0.007076267
      4000	           676.00000         0.169000000         0.032171752         0.006124388
      8000	          1529.00000         0.191125000         0.031673751         0.005249060
     16000	          3457.00000         0.216062500         0.031171335         0.004497088
     32000	          7887.00000         0.246468750         0.030955075         0.003887782
     64000	         17954.00000         0.280531250         0.030672223         0.003353585
    128000	         42230.00000         0.329921875         0.031402854         0.002989008
    256000	         96651.00000         0.377542969         0.031283720         0.002592211




Ordenacion por insercion con inicializacion descendente:
____TAMAÑO____________________TIEMPO_______COTA SUBESTIMADA_____COTAS AJUSTADA____COTA SOBRESTIMADA
	 n			t(n)	      t(n)/n^1.8	    t(n)/n^2	      t(n)/n^2.2
(*)    500	           327.09600         0.004534498         0.001308384         0.000377521
      1000	          1315.00000         0.005235109         0.001315000         0.000330313
      2000	          5175.00000         0.005916384         0.001293750         0.000282907
      4000	         21156.00000         0.006945853         0.001322250         0.000251711
      8000	         83759.00000         0.007897134         0.001308734         0.000216887
     16000	        331770.00000         0.008982995         0.001295977         0.000186971
     32000	       1325592.00000         0.010307181         0.001294523         0.000162585




Ordenacion por shell con inicializacion descendente:
____TAMAÑO____________________TIEMPO_____COTA SUBESTIMADA_______COTA AJUSTADA______COTA SOBRESTIMADA
	 n			t(n)	      t(n)/n^1.0	 t(n)/n^1.14	      t(n)/n^1.3
(*)    500	            21.85400         0.043708000         0.018310708         0.006774386
(*)   1000	            49.42400         0.049424000         0.018790481         0.006222113
(*)   2000	           109.70100         0.054850500         0.018925022         0.005608821
(*)   4000	           241.97500         0.060493750         0.018941838         0.005024496
      8000	           532.00000         0.066500000         0.018896834         0.004486365
     16000	          1162.00000         0.072625000         0.018728774         0.003979698
     32000	          2515.00000         0.078593750         0.018393612         0.003498187
     64000	          5393.00000         0.084265625         0.017897207         0.003046467
    128000	         11722.00000         0.091578125         0.017651530         0.002689235
    256000	         25807.00000         0.100808594         0.017633721         0.002404504

Ordenacion por insercion con inicializacion ascendente:
____TAMAÑO____________________TIEMPO_____COTA SUBESTIMADA_______COTA AJUSTADA______COTA SOBRESTIMADA
	 n			t(n)	      t(n)/n^0.8	  t(n)/n^1.0	      t(n)/n^1.2
(*)    500	             1.72500         0.011956749         0.003450000         0.000995463
(*)   1000	             3.44700         0.013722754         0.003447000         0.000865847
(*)   2000	             6.87800         0.015726721         0.003439000         0.000752014
(*)   4000	            14.04400         0.018443478         0.003511000         0.000668373
(*)   8000	            28.04500         0.021153559         0.003505625         0.000580962
(*)  16000	            56.45600         0.024457616         0.003528500         0.000509057
(*)  32000	           112.65600         0.028030726         0.003520500         0.000442155
(*)  64000	           224.27300         0.032050367         0.003504266         0.000383143
(*) 128000	           448.06700         0.036776889         0.003500523         0.000333189
    256000	           899.00000         0.042380660         0.003511719         0.000290986


Ordenacion por shell con inicializacion ascendente:
____TAMAÑO____________________TIEMPO_____COTA SUBESTIMADA_______COTA AJUSTADA______COTA SOBRESTIMADA
	 n			t(n)	      t(n)/n^1.0	 t(n)/n^1.14	      t(n)/n^1.3
(*)    500	            14.88800         0.029776000         0.012474138         0.004615039
(*)   1000	            34.10300         0.034103000         0.012965599         0.004293313
(*)   2000	            76.34300         0.038171500         0.013170281         0.003903285
(*)   4000	           169.69600         0.042424000         0.013283827         0.003523657
(*)   8000	           373.35300         0.046669125         0.013261635         0.003148492
     16000	           820.00000         0.051250000         0.013216519         0.002808393
     32000	          1783.00000         0.055718750         0.013040083         0.002480027
     64000	          3835.00000         0.059921875         0.012726829         0.002166364
    128000	          8229.00000         0.064289062         0.012391609         0.001887879
    256000	         18739.00000         0.073199219         0.012804212         0.001745961


	
    
CONCLUSIONES: 
Los resultados respaldan la idea de que la ordenación por Shell puede ser preferible en muchos casos, especialmente en datos muy desordenados, 
debido a su eficiencia en relación con la ordenación por inserción. En cambio observamos que cuando el vector esta ordenado o muy ordenado, 
el algoritmo de ordenación por insercción es más eficiente. Esto nos permite, en la práctica, mezclar los dos algoritmos, el algoritmos por
shell para ordenar la mayoría de números para posteriormente acabar con el algoritmo por insercción.
												     
												     
